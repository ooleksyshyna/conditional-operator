ОДНОВИМІРНІ МАСИВИ

1
using System;

class ArrayAverageCalculator
{
    public double CalculateAverage(int[] array)
    {
        if (array.Length == 0)
        {
            return 0.0; // Повертаємо 0, якщо масив порожній, щоб уникнути ділення на 0
        }

        int sum = 0;

        foreach (int num in array)
        {
            sum += num;
        }

        return (double)sum / array.Length;
    }
}

class Program
{
    static void Main()
    {
        int[] numbers = { 1, 2, 3, 4, 5 };
        ArrayAverageCalculator averageCalculator = new ArrayAverageCalculator();
        double average = averageCalculator.CalculateAverage(numbers);
        Console.WriteLine("Average: {0}", average);
    }
}


2
using System;

class PalindromeChecker
{
    public bool IsPalindrome(string str)
    {
        char[] charArray = str.ToCharArray();
        Array.Reverse(charArray);
        string reversedStr = new string(charArray);
        return str.Equals(reversedStr, StringComparison.OrdinalIgnoreCase);
    }
}

class Program
{
    static void Main()
    {
        string input = "level";
        PalindromeChecker palindromeChecker = new PalindromeChecker();
        bool isPalindrome = palindromeChecker.IsPalindrome(input);
        Console.WriteLine("Is Palindrome: {0}", isPalindrome);
    }
}


3
using System;

class EvenNumbersFinder
{
    public void PrintEvenNumbers(int[] array)
    {
        Console.WriteLine("Even numbers in the array:");

        foreach (int num in array)
        {
            if (num % 2 == 0)
            {
                Console.WriteLine(num);
            }
        }
    }
}

class Program
{
    static void Main()
    {
        int[] numbers = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        EvenNumbersFinder evenNumbersFinder = new EvenNumbersFinder();
        evenNumbersFinder.PrintEvenNumbers(numbers);
    }
}


4
using System;

class PositiveSumCalculator
{
    public int CalculatePositiveSum(int[] array)
    {
        int sum = 0;

        foreach (int num in array)
        {
            if (num > 0)
            {
                sum += num;
            }
        }

        return sum;
    }
}

class Program
{
    static void Main()
    {
        int[] numbers = { -1, 2, -3, 4, 5 };
        PositiveSumCalculator positiveSumCalculator = new PositiveSumCalculator();
        int positiveSum = positiveSumCalculator.CalculatePositiveSum(numbers);
        Console.WriteLine("Sum of positive numbers: {0}", positiveSum);
    }
}


5
using System;

class IndexFinder
{
    public int FindIndex(int[] array, int target)
    {
        for (int i = 0; i < array.Length; i++)
        {
            if (array[i] == target)
            {
                return i;
            }
        }

        return -1; // Якщо елемент не знайдено
    }
}

class Program
{
    static void Main()
    {
        int[] numbers = { 1, 3, 5, 7, 9 };
        int target = 5;
        IndexFinder indexFinder = new IndexFinder();
        int index = indexFinder.FindIndex(numbers, target);
        Console.WriteLine("Index of {0}: {1}", target, index);
    }
}


6
using System;

class NegativeProductCalculator
{
    public int CalculateNegativeProduct(int[] array)
    {
        int product = 1;

        foreach (int num in array)
        {
            if (num < 0)
            {
                product *= num;
            }
        }

        return product;
    }
}

class Program
{
    static void Main()
    {
        int[] numbers = { -2, 3, -4, 5, -6 };
        NegativeProductCalculator negativeProductCalculator = new NegativeProductCalculator();
        int negativeProduct = negativeProductCalculator.CalculateNegativeProduct(numbers);
        Console.WriteLine("Product of negative numbers: {0}", negativeProduct);
    }
}


БАГАТОВИМІРНІ МАСИВИ

1
using System;

class MainDiagonalSumCalculator
{
    public int CalculateMainDiagonalSum(int[,] matrix)
    {
        int sum = 0;

        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            sum += matrix[i, i];
        }

        return sum;
    }
}

class Program
{
    static void Main()
    {
        int[,] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        MainDiagonalSumCalculator diagonalSumCalculator = new MainDiagonalSumCalculator();
        int diagonalSum = diagonalSumCalculator.CalculateMainDiagonalSum(matrix);
        Console.WriteLine("Sum of elements along the main diagonal: {0}", diagonalSum);
    }
}

  
2
  using System;

class ColumnProductCalculator
{
    public int CalculateColumnProduct(int[,] matrix, int columnIndex)
    {
        int product = 1;

        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            product *= matrix[i, columnIndex];
        }

        return product;
    }
}

class Program
{
    static void Main()
    {
        int[,] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        int targetColumn = 1; // Замініть на бажаний стовпець
        ColumnProductCalculator columnProductCalculator = new ColumnProductCalculator();
        int columnProduct = columnProductCalculator.CalculateColumnProduct(matrix, targetColumn);
        Console.WriteLine("Product of elements in column {0}: {1}", targetColumn, columnProduct);
    }
}


3
using System;

class MatrixRotator
{
    public int[,] RotateMatrixCounterClockwise(int[,] matrix)
    {
        int n = matrix.GetLength(0);
        int[,] rotatedMatrix = new int[n, n];

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                rotatedMatrix[i, j] = matrix[j, n - 1 - i];
            }
        }

        return rotatedMatrix;
    }
}

class Program
{
    static void Main()
    {
        int[,] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        MatrixRotator matrixRotator = new MatrixRotator();
        int[,] rotatedMatrix = matrixRotator.RotateMatrixCounterClockwise(matrix);

        Console.WriteLine("Original Matrix:");
        PrintMatrix(matrix);

        Console.WriteLine("\nRotated Matrix (90 degrees counter-clockwise):");
        PrintMatrix(rotatedMatrix);
    }

    static void PrintMatrix(int[,] matrix)
    {
        int rows = matrix.GetLength(0);
        int cols = matrix.GetLength(1);

        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                Console.Write(matrix[i, j] + "\t");
            }
            Console.WriteLine();
        }
    }
}


